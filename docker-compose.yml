version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: go-crud-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: crud_demo
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - go-crud-network

  # Go Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-crud-app
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: crud_demo
      DB_SSLMODE: disable
      PORT: 8080
      HOST: 0.0.0.0
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - go-crud-network
    restart: unless-stopped

  # Redis (optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: go-crud-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - go-crud-network
    restart: unless-stopped

  # Nginx (optional - reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: go-crud-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    networks:
      - go-crud-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  go-crud-network:
    driver: bridge